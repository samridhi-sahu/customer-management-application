// Code generated by protoc-gen-graphql. DO NOT EDIT.
package protobuf

import "fmt"
import "context"
import "go.appointy.com/jaal/gtypes"
import "go.appointy.com/jaal/schemabuilder"

func RegisterInputCustomer(schema *schemabuilder.Schema) {
	input := schema.InputObject("CustomerInput", Customer{})

	input.FieldFunc("id", func(target *Customer, source *schemabuilder.ID) {
		target.Id = source.Value
	})
	input.FieldFunc("name", func(target *Customer, source string) {
		target.Name = source
	})
	input.FieldFunc("city", func(target *Customer, source string) {
		target.City = source
	})

}

func RegisterInputNewCustomer(schema *schemabuilder.Schema) {
	input := schema.InputObject("NewCustomerInput", NewCustomer{})

	input.FieldFunc("name", func(target *NewCustomer, source string) {
		target.Name = source
	})
	input.FieldFunc("city", func(target *NewCustomer, source string) {
		target.City = source
	})

}

func RegisterInputCustomerRequest(schema *schemabuilder.Schema) {
	input := schema.InputObject("CustomerRequestInput", CustomerRequest{})

	input.FieldFunc("id", func(target *CustomerRequest, source *schemabuilder.ID) {
		target.Id = source.Value
	})

}

func RegisterInputRequest(schema *schemabuilder.Schema) {
	schema.InputObject("RequestInput", Request{})
}

func RegisterInputAllCustomersList(schema *schemabuilder.Schema) {
	input := schema.InputObject("AllCustomersListInput", AllCustomersList{})

	input.FieldFunc("customers", func(target *AllCustomersList, source []*Customer) {
		target.Customers = source
	})

}

func RegisterPayloadCustomer(schema *schemabuilder.Schema) {
	payload := schema.Object("Customer", Customer{})

	payload.FieldFunc("id", func(ctx context.Context, in *Customer) schemabuilder.ID {
		return schemabuilder.ID{Value: in.Id}
	})
	payload.FieldFunc("name", func(ctx context.Context, in *Customer) string {
		return in.Name
	})
	payload.FieldFunc("city", func(ctx context.Context, in *Customer) string {
		return in.City
	})

}

func RegisterPayloadNewCustomer(schema *schemabuilder.Schema) {
	payload := schema.Object("NewCustomer", NewCustomer{})

	payload.FieldFunc("name", func(ctx context.Context, in *NewCustomer) string {
		return in.Name
	})
	payload.FieldFunc("city", func(ctx context.Context, in *NewCustomer) string {
		return in.City
	})

}

func RegisterPayloadCustomerRequest(schema *schemabuilder.Schema) {
	payload := schema.Object("CustomerRequest", CustomerRequest{})

	payload.FieldFunc("id", func(ctx context.Context, in *CustomerRequest) schemabuilder.ID {
		return schemabuilder.ID{Value: in.Id}
	})

}

func RegisterPayloadRequest(schema *schemabuilder.Schema) {
	schema.Object("Request", Request{})
}

func RegisterPayloadAllCustomersList(schema *schemabuilder.Schema) {
	payload := schema.Object("AllCustomersList", AllCustomersList{})

	payload.FieldFunc("customers", func(ctx context.Context, in *AllCustomersList) []*Customer {
		return in.Customers
	})

}

type CreateCustomerInput struct {
	Name             string
	City             string
	ClientMutationId string
}

type UpdateCustomerInput struct {
	Id               string
	Name             string
	City             string
	ClientMutationId string
}

type DeleteCustomerInput struct {
	Id               string
	ClientMutationId string
}

type CreateCustomerPayload struct {
	Payload          *Customer
	ClientMutationId string
}

type UpdateCustomerPayload struct {
	Payload          *Customer
	ClientMutationId string
}

type DeleteCustomerPayload struct {
	Payload          *Customer
	ClientMutationId string
}

func RegisterInputCreateCustomerInput(schema *schemabuilder.Schema) {
	input := schema.InputObject("CreateCustomerInput", CreateCustomerInput{})

	input.FieldFunc("name", func(target *CreateCustomerInput, source string) {
		target.Name = source
	})

	input.FieldFunc("city", func(target *CreateCustomerInput, source string) {
		target.City = source
	})

	input.FieldFunc("clientMutationId", func(target *CreateCustomerInput, source string) {
		target.ClientMutationId = source
	})
}

func RegisterInputUpdateCustomerInput(schema *schemabuilder.Schema) {
	input := schema.InputObject("UpdateCustomerInput", UpdateCustomerInput{})

	input.FieldFunc("id", func(target *UpdateCustomerInput, source *schemabuilder.ID) {
		target.Id = source.Value
	})

	input.FieldFunc("name", func(target *UpdateCustomerInput, source string) {
		target.Name = source
	})

	input.FieldFunc("city", func(target *UpdateCustomerInput, source string) {
		target.City = source
	})

	input.FieldFunc("clientMutationId", func(target *UpdateCustomerInput, source string) {
		target.ClientMutationId = source
	})
}

func RegisterInputDeleteCustomerInput(schema *schemabuilder.Schema) {
	input := schema.InputObject("DeleteCustomerInput", DeleteCustomerInput{})

	input.FieldFunc("id", func(target *DeleteCustomerInput, source *schemabuilder.ID) {
		target.Id = source.Value
	})

	input.FieldFunc("clientMutationId", func(target *DeleteCustomerInput, source string) {
		target.ClientMutationId = source
	})
}

func RegisterPayloadCreateCustomerPayload(schema *schemabuilder.Schema) {
	payload := schema.Object("CreateCustomerPayload", CreateCustomerPayload{})
	payload.FieldFunc("payload", func(ctx context.Context, in *CreateCustomerPayload) *Customer {
		return in.Payload
	})
	payload.FieldFunc("clientMutationId", func(ctx context.Context, in *CreateCustomerPayload) string {
		return in.ClientMutationId
	})
}

func RegisterPayloadUpdateCustomerPayload(schema *schemabuilder.Schema) {
	payload := schema.Object("UpdateCustomerPayload", UpdateCustomerPayload{})
	payload.FieldFunc("payload", func(ctx context.Context, in *UpdateCustomerPayload) *Customer {
		return in.Payload
	})
	payload.FieldFunc("clientMutationId", func(ctx context.Context, in *UpdateCustomerPayload) string {
		return in.ClientMutationId
	})
}

func RegisterPayloadDeleteCustomerPayload(schema *schemabuilder.Schema) {
	payload := schema.Object("DeleteCustomerPayload", DeleteCustomerPayload{})
	payload.FieldFunc("payload", func(ctx context.Context, in *DeleteCustomerPayload) *Customer {
		return in.Payload
	})
	payload.FieldFunc("clientMutationId", func(ctx context.Context, in *DeleteCustomerPayload) string {
		return in.ClientMutationId
	})
}

func RegisterCustomerServicesOperations(schema *schemabuilder.Schema, client CustomerServicesClient) {

	schema.Query().FieldFunc("getCustomer", func(ctx context.Context, args struct {
		Input *CustomerRequest
	}) (Customer, error) {
        fmt.Println("qwerty")
		request := &CustomerRequest{

			Id: args.Input.Id,
		}

		response, err := client.GetCustomer(ctx, request)
		if err != nil {
			return Customer{}, err
		}
		return *response, nil
	})

	schema.Query().FieldFunc("getCustomers", func(ctx context.Context, args struct {
	}) (AllCustomersList, error) {

		request := &Request{}

		response, err := client.GetAllCustomers(ctx, request)
		if err != nil {
			return AllCustomersList{}, err
		}
		return *response, nil
	})

	schema.Mutation().FieldFunc("createCustomer", func(ctx context.Context, args struct {
		Input *CreateCustomerInput
	}) (Customer, error) {
		request := &NewCustomer{

			Name: args.Input.Name,
			City: args.Input.City,
		}

		response, err := client.CreateCustomer(ctx, request)
		return *response, err
	})

	schema.Mutation().FieldFunc("updateCustomer", func(ctx context.Context, args struct {
		Input *UpdateCustomerInput
	}) (Customer, error) {
		request := &Customer{

			Id:   args.Input.Id,
			Name: args.Input.Name,
			City: args.Input.City,
		}

		response, err := client.UpdateCustomer(ctx, request)
		return *response, err
	})

	schema.Mutation().FieldFunc("deleteCustomer", func(ctx context.Context, args struct {
		Input *DeleteCustomerInput
	}) (Customer, error) {
		request := &CustomerRequest{

			Id: args.Input.Id,
		}

		response, err := client.DeleteCustomer(ctx, request)
		return *response, err
	})

}

func init() {

	RegisterInputAllCustomersList(gtypes.Schema)
	RegisterInputCreateCustomerInput(gtypes.Schema)
	RegisterInputCustomer(gtypes.Schema)
	RegisterInputCustomerRequest(gtypes.Schema)
	RegisterInputDeleteCustomerInput(gtypes.Schema)
	RegisterInputNewCustomer(gtypes.Schema)
	RegisterInputRequest(gtypes.Schema)
	RegisterInputUpdateCustomerInput(gtypes.Schema)
	RegisterPayloadAllCustomersList(gtypes.Schema)
	RegisterPayloadCreateCustomerPayload(gtypes.Schema)
	RegisterPayloadCustomer(gtypes.Schema)
	RegisterPayloadCustomerRequest(gtypes.Schema)
	RegisterPayloadDeleteCustomerPayload(gtypes.Schema)
	RegisterPayloadNewCustomer(gtypes.Schema)
	RegisterPayloadRequest(gtypes.Schema)
	RegisterPayloadUpdateCustomerPayload(gtypes.Schema)
}
